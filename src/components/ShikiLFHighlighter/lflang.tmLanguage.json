{
  "name": "Lingua Franca",
  "scopeName": "source.lf",
  "fileTypes": ["lf"],
  "repository": {
    "global": {
      "patterns": [
        {
          "include": "#linecomment"
        },
        {
          "include": "#blockcomment"
        },
        {
          "include": "#c-target"
        },
        {
          "include": "#cpp-target"
        },
        {
          "include": "#ts-target"
        },
        {
          "include": "#py-target"
        },
        {
          "include": "#rs-target"
        },
        {
          "include": "#post-targetspec"
        }
      ]
    },
    "post-targetspec": {
      "patterns": [
        {
          "include": "#target-specification"
        },
        {
          "include": "#import-statement"
        },
        {
          "include": "#context-insensitive"
        }
      ]
    },
    "context-insensitive": {
      "patterns": [
        {
          "include": "#linecomment"
        },
        {
          "include": "#blockcomment"
        },
        {
          "include": "#reactor-declaration"
        },
        {
          "include": "#reactor-block"
        },
        {
          "include": "#preamble"
        },
        {
          "include": "#input-output"
        },
        {
          "include": "#action"
        },
        {
          "include": "#state"
        },
        {
          "include": "#timer"
        },
        {
          "include": "#reactor-member"
        },
        {
          "include": "#number"
        },
        {
          "include": "#string"
        },
        {
          "include": "#boolean"
        },
        {
          "include": "#time-unit"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#startup-shutdown"
        },
        {
          "include": "#type-certain"
        },
        {
          "include": "#instantiation"
        },
        {
          "include": "#after"
        },
        {
          "include": "#connection-modifier"
        },
        {
          "include": "#member-access-operator"
        },
        {
          "include": "#function-like"
        }
      ]
    },
    "c-target": {
      "begin": "(?=\\btarget\\s+C\\b)",
      "patterns": [
        {
          "include": "#c-or-cpp-target"
        }
      ]
    },
    "cpp-target": {
      "begin": "(?=\\btarget\\s+C?Cpp\\b)",
      "patterns": [
        {
          "include": "#c-or-cpp-target"
        }
      ]
    },
    "c-or-cpp-target": {
      "patterns": [
        {
          "begin": "(?<=(input|state))",
          "end": "[\\(\\{;=\\n]|(?=\\{=)",
          "patterns": [
            {
              "include": "#nested-member-id"
            },
            {
              "begin": "(?<=:)",
              "end": "(?=[\\(\\{;=\\n])",
              "name": "meta.embedded.block.cpp",
              "patterns": [
                {
                  "include": "#type"
                },
                {
                  "include": "source.cpp"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?<=(output|action))",
          "end": "[\\(;\\n]|(?=\\{=)",
          "patterns": [
            {
              "include": "#nested-member-id"
            },
            {
              "begin": "(?<=:)",
              "end": "(?=[\\(\\{;=\\n])",
              "name": "meta.embedded.block.cpp",
              "patterns": [
                {
                  "include": "#type"
                },
                {
                  "include": "source.cpp"
                }
              ]
            }
          ]
        },
        {
          "include": "#post-targetspec"
        },
        {
          "begin": "\\{=",
          "end": "(([<>]?[<>+\\-*/%&\\^|]?=\\}))",
          "name": "meta.embedded.block.cpp",
          "patterns": [
            {
              "include": "source.cpp"
            }
          ]
        }
      ]
    },
    "ts-target": {
      "begin": "(?=\\btarget\\s+TypeScript\\b)",
      "patterns": [
        {
          "include": "#post-targetspec"
        },
        {
          "begin": "\\{=(?!=\\})",
          "end": "([<>]?[<>+\\-*/%&\\^|]?=\\})",
          "name": "meta.embedded.block.ts",
          "patterns": [
            {
              "include": "source.ts"
            }
          ]
        }
      ]
    },
    "py-target": {
      "begin": "(?=\\btarget\\s+Python\\b)",
      "patterns": [
        {
          "include": "#post-targetspec"
        },
        {
          "begin": "\\{=(?!=\\})",
          "end": "([<>]?[<>+\\-*/%&\\^|]?=\\})",
          "name": "meta.embedded.block.py",
          "patterns": [
            {
              "begin": "\\b(?=import\\b)",
              "end": "(?==\\})",
              "patterns": [
                {
                  "name": "keyword.control.import.python",
                  "match": "\\b(import|as)\\b"
                }
              ]
            },
            {
              "include": "source.python"
            }
          ]
        }
      ]
    },
    "rs-target": {
      "begin": "(?=\\btarget\\s+Rust\\b)",
      "patterns": [
        {
          "include": "#post-targetspec"
        },
        {
          "begin": "\\{=(?!=\\})",
          "end": "([<>]?[<>+\\-*/%&\\^|]?=\\})",
          "name": "meta.embedded.block.rs",
          "patterns": [
            {
              "include": "source.rust"
            }
          ]
        }
      ]
    },
    "target-specification": {
      "name": "meta.targetspec.lflang",
      "begin": "(?=\\btarget\\b)",
      "end": "(?<=;)\\s*$|(?<=})\\s*$|(?<=Python)\\s*$|(?<=(CCpp|Rust))\\s*$|(?<=C)\\s*$|(?<=Cpp)\\s*$|(?<=TypeScript)\\s*$",
      "patterns": [
        {
          "include": "#context-insensitive"
        },
        {
          "name": "constant.language.lflang",
          "match": "\\b(C|C?Cpp|Python|TypeScript|Rust)\\b"
        },
        {
          "name": "keyword.control.lflang",
          "match": "\\b(target)\\b"
        },
        {
          "name": "variable.parameter.lflang",
          "match": "(^|(?<=(,|\\{)))\\s*\\b([\\w\\-]+)\\b(?=\\s*:)"
        }
      ]
    },
    "import-statement": {
      "begin": "(?=^\\s*import\\b)",
      "end": ";|(?<=\")\\s*$",
      "patterns": [
        {
          "include": "#context-insensitive"
        },
        {
          "name": "keyword.control.import.lflang",
          "match": "\\b(import)\\b|\\b(as)\\b|\\b(from)\\b"
        },
        {
          "begin": "\\b(?<=import)\\b",
          "end": "\\b(?=from)\\b",
          "patterns": [
            {
              "name": "entity.name.type.lflang",
              "match": "\\b\\w+\\b"
            }
          ]
        }
      ]
    },
    "linecomment": {
      "name": "comment.line.double-dash.lflang",
      "begin": "(^[ \\t]+)?(?=//|#)",
      "end": "(?=$)"
    },
    "blockcomment": {
      "patterns": [
        {
          "name": "comment.block.lflang",
          "begin": "/\\*(\\*)?(?!/)",
          "end": "\\*/"
        }
      ]
    },
    "reactor-declaration": {
      "patterns": [
        {
          "name": "storage.modifier.lflang",
          "match": "\\b(reactor)\\b|\\b(federated)\\b|\\b(main)\\b|\\b(realtime)\\b|\\b(at)\\b|\\b(extends)\\b"
        },
        {
          "name": "entity.name.type.lflang",
          "match": "(?<=\\breactor\\b\\s)\\s*(?!at)(?!extends)(\\w+)\\b"
        }
      ]
    },
    "reactor-block": {
      "patterns": [
        {
          "name": "keyword.control.lflang",
          "match": "\\b(reaction|method|STP|deadline|mutation)\\b"
        },
        {
          "name": "keyword.control.lflang",
          "match": "\\b(mode|initial)\\b"
        },
        {
          "name": "keyword.control.lflang",
          "match": "\\b(reset|continue)\\b(?=\\()"
        },
        {
          "name": "storage.modifier.lflang",
          "match": "\\bconst\\b"
        },
        {
          "name": "entity.name.function.member.lflang",
          "match": "(?<=\\bmethod\\b)\\s+(\\w+)\\b"
        }
      ]
    },
    "preamble": {
      "patterns": [
        {
          "name": "keyword.control.lflang",
          "match": "\\b(preamble)\\b"
        },
        {
          "name": "keyword.control.lflang",
          "match": "\\b(private|public)\\b"
        }
      ]
    },
    "input-output": {
      "patterns": [
        {
          "name": "storage.modifier.lflang",
          "match": "\\b(input|output|mutable)\\b"
        }
      ]
    },
    "action": {
      "patterns": [
        {
          "name": "storage.modifier.lflang",
          "match": "\\b(logical|physical)\\b"
        },
        {
          "name": "storage.modifier.lflang",
          "match": "\\b(action)\\b"
        }
      ]
    },
    "state": {
      "patterns": [
        {
          "name": "storage.modifier.lflang",
          "match": "\\b(reset)\\b(?=\\s*state)"
        },
        {
          "name": "storage.modifier.lflang",
          "match": "\\b(state)\\b"
        }
      ]
    },
    "timer": {
      "name": "storage.modifier.lflang",
      "match": "\\b(timer)\\b"
    },
    "reactor-member": {
      "begin": "(?<=\\b(input |output|action|state )\\b)",
      "end": "(?=[\\(\\{;=\\n])",
      "patterns": [
        {
          "include": "#nested-member-id"
        },
        {
          "include": "#nested-member-type"
        }
      ]
    },
    "nested-member-id": {
      "patterns": [
        {
          "begin": "(?<=(\\binput\\b |\\boutput\\b|\\baction\\b|\\bstate\\b ))",
          "end": "(?=[:\\(\\{;=\\n])",
          "patterns": [
            {
              "name": "variable.other.lflang",
              "match": "\\b(\\w+)\\b"
            }
          ]
        }
      ]
    },
    "nested-member-type": {
      "begin": "(?<=:)",
      "end": "(?=[\\(\\{;=\\n])",
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "name": "entity.name.type.lflang",
          "match": "\\b([A-Z]\\w*)\\b"
        },
        {
          "name": "storage.type.lflang",
          "match": "\\b(\\w+)\\b"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.int.lflang",
          "match": "\\b((?<![\\w\\d])-)?\\d+\\b(?!\\.)"
        },
        {
          "name": "constant.numeric.float.lflang",
          "match": "\\b((?<![\\w\\d])-)?\\d*\\.\\d+([eE][+\\-]?\\d+)?\\b"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "name": "string.quoted.triple.lflang",
          "begin": "'''",
          "end": "'''",
          "patterns": [
            {
              "include": "#string-helper"
            }
          ]
        },
        {
          "name": "string.quoted.triple.lflang",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "include": "#string-helper"
            }
          ]
        },
        {
          "name": "string.quoted.double.lflang",
          "begin": "\"",
          "end": "(\"|$)",
          "patterns": [
            {
              "include": "#string-helper"
            }
          ]
        },
        {
          "name": "string.quoted.single.lflang",
          "begin": "'",
          "end": "('|$)",
          "patterns": [
            {
              "include": "#string-helper"
            }
          ]
        }
      ]
    },
    "string-helper": {
      "patterns": [
        {
          "name": "constant.character.escape",
          "match": "\\\\\\\\|\\\\n|\\\\r|\\\\t|\\\\\"|\\\\'"
        }
      ]
    },
    "boolean": {
      "name": "constant.language.lflang",
      "match": "\\b(true|True|false|False)\\b"
    },
    "time-unit": {
      "name": "constant.numeric.lflang",
      "match": "\\b\\d*(nsec|nsecs|usec|usecs|msec|msecs|sec|secs|second|seconds|min|mins|minute|minutes|hour|hours|day|days|week|weeks)\\b"
    },
    "operator": {
      "name": "keyword.operator.lflang",
      "match": "->|~>|\\+|-|\\*|/|=|%|@|\\.|::"
    },
    "startup-shutdown": {
      "name": "support.variable.lflang",
      "match": "\\b(startup|shutdown|reset)\\b"
    },
    "type-certain": {
      "name": "storage.type.lflang",
      "match": "\\b(time)\\b|((?<=:\\s)\\w+\\b)"
    },
    "instantiation": {
      "patterns": [
        {
          "name": "keyword.control.new.lflang",
          "match": "\\b(new)\\b"
        },
        {
          "name": "variable.other.constant.reactorinstance.lflang",
          "match": "\\b(\\w+)(?=\\s*=\\s*new\\b)"
        },
        {
          "name": "entity.name.type.lflang",
          "match": "(?<=new\\s)\\s*(\\[[^\\]]*\\])?\\s*(\\w+)\\b"
        },
        {
          "begin": "(?<=\\s*=\\s*new\\s*(\\[[^\\]]*\\])?\\s+\\w+\\s*)<",
          "end": ">",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "connection-modifier": {
      "name": "keyword.control.lflang",
      "match": "\\b(after|interleaved|serializer)\\b"
    },
    "member-access-operator": {
      "patterns": [
        {
          "name": "variable.other.constant.reactorinstance.lflang",
          "match": "(\\b\\w+\\b)(?=((\\.)|(::))\\w+)"
        },
        {
          "name": "variable.other.lflang",
          "match": "(?<=((\\w\\.)|(::)))(\\b\\w+\\b)"
        }
      ]
    },
    "function-like": {
      "name": "support.function.lflang",
      "match": "\\bwidthof(?=\\()"
    }
  },
  "patterns": [
    {
      "include": "#global"
    }
  ],
  "uuid": "cd57a55d-0af5-4750-a6a0-3b7108553c2a"
}
